hibob-job-listings.php

<?php
/**
 * Plugin Name:       Hibob Job Listings
 * Plugin URI:        https://konceptslab.com/
 * Description:       Integrates Hibob job listings and details into your WordPress site.
 * Version:           1.0.0
 * Author:            Koncepts Lab
 * Author URI:        https://konceptslab.com/
 * License:           GPL v2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       hibob-job-listings
 * Domain Path:       /languages
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
    die;
}

define( 'HIBOB_JOBS_VERSION', '1.0.0' );
define( 'HIBOB_JOBS_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
define( 'HIBOB_JOBS_PLUGIN_URL', plugin_dir_url( __FILE__ ) );

/**
 * The core plugin class that is used to define internationalization,
 * admin-specific hooks, and public-facing site hooks.
 */
require HIBOB_JOBS_PLUGIN_DIR . 'includes/class-hibob-api.php';
require HIBOB_JOBS_PLUGIN_DIR . 'includes/class-hibob-shortcodes.php';
require HIBOB_JOBS_PLUGIN_DIR . 'includes/class-hibob-admin.php';

/**
 * Begins execution of the plugin.
 *
 * @since    1.0.0
 */
function run_hibob_job_listings() {
    $plugin_admin = new Hibob_Admin();
    $plugin_admin->init();

    $plugin_shortcodes = new Hibob_Shortcodes();
    $plugin_shortcodes->init();

    // Enqueue styles
    add_action( 'wp_enqueue_scripts', 'hibob_jobs_enqueue_styles' );
}
run_hibob_job_listings();

/**
 * Enqueue frontend styles.
 *
 * @since    1.0.0
 */
function hibob_jobs_enqueue_styles() {
    wp_enqueue_style(
        'hibob-jobs-style',
        HIBOB_JOBS_PLUGIN_URL . 'assets/css/hibob-jobs.css',
        array(),
        HIBOB_JOBS_VERSION,
        'all'
    );
}

/**
 * Activation hook.
 * Flush rewrite rules if you were to implement custom post types or permalinks.
 * For now, it can be empty or set default options.
 */
function hibob_jobs_activate() {
    // Example: Set default options if not already set
    if ( false === get_option( 'hibob_api_username' ) ) {
        add_option( 'hibob_api_username', '' );
    }
    if ( false === get_option( 'hibob_api_password' ) ) {
        add_option( 'hibob_api_password', '' );
    }
    // If you add custom rewrite rules for job details pages later, flush them here.
    // flush_rewrite_rules();
}
register_activation_hook( __FILE__, 'hibob_jobs_activate' );

/**
 * Deactivation hook.
 */
function hibob_jobs_deactivate() {
    // If you add custom rewrite rules, flush them here.
    // flush_rewrite_rules();
}
register_deactivation_hook( __FILE__, 'hibob_jobs_deactivate' );


assets/css/hibob-jobs.css

/* Hibob Job Listings Basic Styles */

.hibob-error, .hibob-no-jobs {
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;
}

.hibob-error {
    color: #a94442;
    background-color: #f2dede;
    border-color: #ebccd1;
}

.hibob-no-jobs {
    color: #31708f;
    background-color: #d9edf7;
    border-color: #bce8f1;
}

.hibob-job-listings-container ul.hibob-job-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.hibob-job-listings-container .hibob-job-item {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 4px;
    background-color: #f9f9f9;
}

.hibob-job-listings-container .hibob-job-title {
    margin-top: 0;
    margin-bottom: 5px;
    font-size: 1.5em;
}

.hibob-job-listings-container .hibob-job-meta {
    font-size: 0.9em;
    color: #555;
    margin-bottom: 10px;
}

.hibob-job-listings-container .hibob-job-details-link {
    display: inline-block;
    padding: 8px 15px;
    background-color: #0073aa; /* WordPress blue */
    color: #fff;
    text-decoration: none;
    border-radius: 3px;
    font-size: 0.9em;
}

.hibob-job-listings-container .hibob-job-details-link:hover {
    background-color: #005a87;
}

/* Job Details Page */
.hibob-job-details-container {
    border: 1px solid #eee;
    padding: 20px;
    background-color: #fff;
}

.hibob-job-details-container .hibob-job-detail-title {
    margin-top: 0;
    font-size: 2em;
    color: #333;
}

.hibob-job-details-container .hibob-job-detail-meta {
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

.hibob-job-details-container .hibob-job-detail-meta p {
    margin: 5px 0;
    font-size: 1em;
    color: #555;
}

.hibob-job-details-container .hibob-job-detail-description {
    line-height: 1.6;
    margin-bottom: 20px;
}
.hibob-job-details-container .hibob-job-detail-description h2 {
    font-size: 1.5em;
    margin-top: 25px;
    margin-bottom: 10px;
}
.hibob-job-details-container .hibob-job-detail-description ul {
    list-style: disc;
    margin-left: 20px;
}
.hibob-job-details-container .hibob-job-detail-description p {
    margin-bottom: 1em;
}

.hibob-apply-now a.button.button-primary {
    font-size: 1.1em;
    padding: 10px 20px;
}

/* Pagination */
.hibob-pagination {
    margin-top: 20px;
    text-align: center;
}
.hibob-pagination a {
    margin: 0 5px;
    padding: 5px 10px;
    border: 1px solid #ddd;
    text-decoration: none;
    color: #0073aa;
}
.hibob-pagination a:hover {
    background-color: #f0f0f0;
}

/* Basic filter form styling (if you add one directly on the page) */
.hibob-filters-form {
    margin-bottom: 20px;
    padding: 15px;
    border: 1px solid #e0e0e0;
    background-color: #f7f7f7;
    border-radius: 4px;
}
.hibob-filters-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}
.hibob-filters-form input[type="text"],
.hibob-filters-form select {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 3px;
    box-sizing: border-box; /* So padding doesn't add to width */
}
.hibob-filters-form input[type="submit"] {
    background-color: #0073aa;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}
.hibob-filters-form input[type="submit"]:hover {
    background-color: #005a87;
}


includes/class-hibob-admin.php

<?php
/**
 * Handles the admin settings page for Hibob API credentials.
 *
 * @package HibobJobLisings
 * @since   1.0.0
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
    die;
}

class Hibob_Admin {

    /**
     * Option group for settings.
     * @var string
     */
    private $option_group = 'hibob_api_settings_group';

    /**
     * Initialize the class and set its properties.
     *
     * @since    1.0.0
     */
    public function init() {
        add_action( 'admin_menu', array( $this, 'add_plugin_page' ) );
        add_action( 'admin_init', array( $this, 'page_init' ) );
    }

    /**
     * Add options page.
     *
     * @since    1.0.0
     */
    public function add_plugin_page() {
        add_options_page(
            'Hibob API Settings',
            'Hibob API Settings',
            'manage_options',
            'hibob-api-settings',
            array( $this, 'create_admin_page' )
        );
    }

    /**
     * Options page callback.
     *
     * @since    1.0.0
     */
    public function create_admin_page() {
        ?>
        <div class="wrap">
            <h1>Hibob API Settings</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields( $this->option_group );
                do_settings_sections( 'hibob-admin-settings-section' );
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    /**
     * Register and add settings.
     *
     * @since    1.0.0
     */
    public function page_init() {
        register_setting(
            $this->option_group,
            'hibob_api_username',
            array( $this, 'sanitize_text_field' )
        );

        register_setting(
            $this->option_group,
            'hibob_api_password',
            array( $this, 'sanitize_text_field' ) // Passwords are not typically "sanitized" this way but stored as is.
                                                  // WordPress handles the saving. For display, it will be type="password".
        );

        add_settings_section(
            'hibob_api_credentials_section',
            'API Credentials',
            array( $this, 'print_section_info' ),
            'hibob-admin-settings-section'
        );

        add_settings_field(
            'hibob_api_username_id',
            'Hibob API Username',
            array( $this, 'username_callback' ),
            'hibob-admin-settings-section',
            'hibob_api_credentials_section'
        );

        add_settings_field(
            'hibob_api_password_id',
            'Hibob API Password',
            array( $this, 'password_callback' ),
            'hibob-admin-settings-section',
            'hibob_api_credentials_section'
        );
    }

    /**
     * Sanitize each setting field as needed.
     *
     * @since    1.0.0
     * @param array $input Contains all settings fields as array keys
     * @return string Sanitized text.
     */
    public function sanitize_text_field( $input ) {
        return sanitize_text_field( $input );
    }

    /**
     * Print the Section text.
     *
     * @since    1.0.0
     */
    public function print_section_info() {
        print 'Enter your Hibob API credentials below:';
    }

    /**
     * Get the settings option array and print one of its values.
     *
     * @since    1.0.0
     */
    public function username_callback() {
        printf(
            '<input type="text" id="hibob_api_username_id" name="hibob_api_username" value="%s" class="regular-text" />',
            esc_attr( get_option( 'hibob_api_username' ) )
        );
    }

    /**
     * Get the settings option array and print one of its values.
     *
     * @since    1.0.0
     */
    public function password_callback() {
        printf(
            '<input type="password" id="hibob_api_password_id" name="hibob_api_password" value="%s" class="regular-text" />',
            esc_attr( get_option( 'hibob_api_password' ) )
        );
        echo '<p class="description">Your password is stored securely and will not be displayed.</p>';
    }
}


includes/class-hibob-api.php

<?php
/**
 * Handles communication with the Hibob API.
 *
 * @package HibobJobLisings
 * @since   1.0.0
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
    die;
}

class Hibob_API {

    /**
     * Hibob API base URL.
     * @var string
     */
    private const API_BASE_URL = 'https://api.hibob.com/v1/'; // Adjust if your base URL is different

    /**
     * Hibob API username.
     * @var string|false
     */
    private $username;

    /**
     * Hibob API password.
     * @var string|false
     */
    private $password;

    /**
     * Constructor. Loads API credentials.
     *
     * @since    1.0.0
     */
    public function __construct() {
        $this->username = get_option( 'hibob_api_username' );
        $this->password = get_option( 'hibob_api_password' );
    }

    /**
     * Checks if API credentials are set.
     *
     * @since 1.0.0
     * @return bool True if credentials are set, false otherwise.
     */
    public function has_credentials() {
        return ! empty( $this->username ) && ! empty( $this->password );
    }

    /**
     * Makes a request to the Hibob API.
     *
     * @since 1.0.0
     * @param string $endpoint The API endpoint (e.g., 'hiring/job-ads/search').
     * @param string $method   HTTP method ('GET', 'POST').
     * @param array|null $body  Request body for POST requests.
     * @return array|WP_Error  The decoded JSON response or WP_Error on failure.
     */
    private function make_request( $endpoint, $method = 'GET', $body = null ) {
        if ( ! $this->has_credentials() ) {
            return new WP_Error( 'hibob_api_credentials_missing', 'Hibob API username or password not configured.' );
        }

        $url = self::API_BASE_URL . ltrim( $endpoint, '/' );

        $args = array(
            'method'  => $method,
            'headers' => array(
                'Authorization' => 'Basic ' . base64_encode( $this->username . ':' . $this->password ),
                'Accept'        => 'application/json',
            ),
            'timeout' => 30, // 30 seconds timeout
        );

        if ( 'POST' === $method && ! is_null( $body ) ) {
            $args['body'] = json_encode( $body );
            $args['headers']['Content-Type'] = 'application/json';
        }

        $response = ( 'POST' === $method ) ? wp_remote_post( $url, $args ) : wp_remote_get( $url, $args );

        if ( is_wp_error( $response ) ) {
            error_log( 'Hibob API WP_Error: ' . $response->get_error_message() );
            return new WP_Error( 'hibob_api_request_failed', 'API request failed: ' . $response->get_error_message(), array( 'status' => 500 ) );
        }

        $response_code = wp_remote_retrieve_response_code( $response );
        $response_body = wp_remote_retrieve_body( $response );
        $data          = json_decode( $response_body, true );

        if ( $response_code >= 200 && $response_code < 300 ) {
            if ( json_last_error() !== JSON_ERROR_NONE ) {
                error_log( 'Hibob API JSON Decode Error: ' . json_last_error_msg() . ' Body: ' . $response_body );
                return new WP_Error( 'hibob_api_json_error', 'Failed to decode API response.', array( 'status' => $response_code ) );
            }
            return $data;
        } else {
            $error_message = 'Hibob API Error: ' . $response_code;
            if ( isset( $data['message'] ) ) {
                $error_message .= ' - ' . $data['message'];
            } elseif (isset( $data['error'] ) && isset( $data['error']['message'] )) {
                 $error_message .= ' - ' . $data['error']['message'];
            } else if (!empty($response_body) && strlen($response_body) < 200) { // Avoid logging huge HTML error pages
                 $error_message .= ' - Response: ' . strip_tags($response_body);
            }
            error_log( $error_message );
            return new WP_Error( 'hibob_api_error', $error_message, array( 'status' => $response_code, 'data' => $data ) );
        }
    }

    /**
     * Searches for job listings.
     *
     * @since 1.0.0
     * @param array $filters Associative array of filters (department, employmentType, keywords, location, recruiterEmail, siteId, status, from, size).
     *                       Example: ['department' => 'Engineering', 'location' => 'New York']
     * @return array|WP_Error List of jobs or WP_Error.
     */
    public function search_job_listings( $filters = array() ) {
        // API expects a requestBody, even if empty for no filters.
        $request_body = new stdClass(); // Empty object if no filters.
        if (!empty($filters)) {
            $request_body = $filters;
        }
        return $this->make_request( 'hiring/job-ads/search', 'POST', $request_body );
    }

    /**
     * Gets job details by ID.
     *
     * @since 1.0.0
     * @param string $job_id The ID of the job.
     * @return array|WP_Error Job details or WP_Error.
     */
    public function get_job_details( $job_id ) {
        if ( empty( $job_id ) ) {
            return new WP_Error( 'hibob_invalid_job_id', 'Job ID cannot be empty.' );
        }
        return $this->make_request( "hiring/job-ads/{$job_id}", 'GET' );
    }
}


includes/class-hibob-shortcodes.php

<?php
/**
 * Handles the shortcodes for displaying Hibob job listings and details.
 *
 * @package HibobJobLisings
 * @since   1.0.0
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
    die;
}

class Hibob_Shortcodes {

    /**
     * API handler instance.
     * @var Hibob_API
     */
    private $api;

    /**
     * Page URL for job details.
     * Should be set by the user where they place the [hibob_job_details] shortcode.
     * @var string
     */
    private $job_details_page_url = ''; // User will need to create a page and put this URL in listings shortcode

    /**
     * Initialize the class and set its properties.
     *
     * @since    1.0.0
     */
    public function init() {
        $this->api = new Hibob_API();
        add_shortcode( 'hibob_job_listings', array( $this, 'render_job_listings_shortcode' ) );
        add_shortcode( 'hibob_job_details', array( $this, 'render_job_details_shortcode' ) );
    }

    /**
     * Renders the [hibob_job_listings] shortcode.
     *
     * Attributes:
     * - department (string)
     * - employment_type (string) - Note: API uses 'employmentType'
     * - keywords (string)
     * - location (string)
     * - recruiter_email (string) - Note: API uses 'recruiterEmail'
     * - site_id (string|int) - Note: API uses 'siteId'
     * - status (string) - e.g., "Published"
     * - job_details_page (string) - URL of the page containing the [hibob_job_details] shortcode. REQUIRED.
     * - limit (int) - Corresponds to 'size' in API, default 10
     * - offset (int) - Corresponds to 'from' in API, default 0
     *
     * @since 1.0.0
     * @param array $atts Shortcode attributes.
     * @return string HTML output for the job listings.
     */
    public function render_job_listings_shortcode( $atts ) {
        if ( ! $this->api->has_credentials() ) {
            return '<p class="hibob-error">Hibob API credentials are not configured. Please check plugin settings.</p>';
        }

        $atts = shortcode_atts(
            array(
                'department'         => '',
                'employment_type'    => '', // Map to employmentType
                'keywords'           => '',
                'location'           => '',
                'recruiter_email'    => '', // Map to recruiterEmail
                'site_id'            => '', // Map to siteId
                'status'             => 'Published', // Default to Published jobs
                'job_details_page'   => '', // This is crucial
                'limit'              => 10, // 'size' in API
                'offset'             => 0,  // 'from' in API
            ),
            $atts,
            'hibob_job_listings'
        );

        if ( empty( $atts['job_details_page'] ) ) {
            return '<p class="hibob-error">Error: The "job_details_page" attribute is missing in the [hibob_job_listings] shortcode. Please provide the URL of your job details page.</p>';
        }
        $this->job_details_page_url = esc_url( $atts['job_details_page'] );


        // Prepare filters for API
        $api_filters = array();
        if ( ! empty( $atts['department'] ) ) $api_filters['department'] = sanitize_text_field( $atts['department'] );
        if ( ! empty( $atts['employment_type'] ) ) $api_filters['employmentType'] = sanitize_text_field( $atts['employment_type'] );
        if ( ! empty( $atts['keywords'] ) ) $api_filters['keywords'] = sanitize_text_field( $atts['keywords'] );
        if ( ! empty( $atts['location'] ) ) $api_filters['location'] = sanitize_text_field( $atts['location'] );
        if ( ! empty( $atts['recruiter_email'] ) ) $api_filters['recruiterEmail'] = sanitize_email( $atts['recruiter_email'] );
        if ( ! empty( $atts['site_id'] ) ) $api_filters['siteId'] = sanitize_text_field( $atts['site_id'] ); // Could be string or int
        if ( ! empty( $atts['status'] ) ) $api_filters['status'] = sanitize_text_field( $atts['status'] );

        $api_filters['size'] = absint( $atts['limit'] );
        $api_filters['from'] = absint( $atts['offset'] );

        $response = $this->api->search_job_listings( $api_filters );

        if ( is_wp_error( $response ) ) {
            return '<p class="hibob-error">Error fetching job listings: ' . esc_html( $response->get_error_message() ) . '</p>';
        }

        if ( empty( $response['data'] ) || ! is_array( $response['data'] ) ) {
            return '<p class="hibob-no-jobs">No job listings found matching your criteria.</p>';
        }

        $jobs = $response['data'];
        ob_start();
        ?>
        <div class="hibob-job-listings-container">
            <ul class="hibob-job-list">
                <?php foreach ( $jobs as $job ) : ?>
                    <?php
                    // Ensure essential fields exist before trying to access them
                    $job_id = isset( $job['id'] ) ? $job['id'] : null;
                    $title = isset( $job['title'] ) ? $job['title'] : 'N/A';
                    $department = isset( $job['department'] ) ? $job['department'] : 'N/A';
                    $location = isset( $job['location'] ) ? $job['location'] : 'N/A'; // location can be an object sometimes

                    if ( is_array( $location ) && isset( $location['name'] ) ) {
                        $location_display = $location['name'];
                    } elseif ( is_string( $location ) ) {
                        $location_display = $location;
                    } else {
                        $location_display = 'N/A';
                    }

                    if ( !$job_id ) continue; // Skip if no ID

                    $details_url = add_query_arg( 'job_id', $job_id, $this->job_details_page_url );
                    ?>
                    <li class="hibob-job-item">
                        <h3 class="hibob-job-title"><?php echo esc_html( $title ); ?></h3>
                        <p class="hibob-job-meta">
                            <strong>Department:</strong> <?php echo esc_html( $department ); ?><br>
                            <strong>Location:</strong> <?php echo esc_html( $location_display ); ?>
                        </p>
                        <a href="<?php echo esc_url( $details_url ); ?>" class="hibob-job-details-link button">View Job Details</a>
                    </li>
                <?php endforeach; ?>
            </ul>
            <?php
                // Basic Pagination (if total is provided by API, which it seems to be in `response.meta.total`)
                if (isset($response['meta']) && isset($response['meta']['total'])) {
                    $total_jobs = (int) $response['meta']['total'];
                    $current_page_url = remove_query_arg(array('offset', 'limit')); // Base URL for pagination

                    if ($total_jobs > $api_filters['size']) {
                        echo '<div class="hibob-pagination">';
                        // Previous
                        if ($api_filters['from'] > 0) {
                            $prev_offset = max(0, $api_filters['from'] - $api_filters['size']);
                            echo '<a href="' . esc_url(add_query_arg(array('offset' => $prev_offset, 'limit' => $api_filters['size']), $current_page_url)) . '">« Previous</a> ';
                        }
                        // Next
                        if (($api_filters['from'] + $api_filters['size']) < $total_jobs) {
                            $next_offset = $api_filters['from'] + $api_filters['size'];
                            echo '<a href="' . esc_url(add_query_arg(array('offset' => $next_offset, 'limit' => $api_filters['size']), $current_page_url)) . '">Next »</a>';
                        }
                        echo '</div>';
                    }
                }
            ?>
        </div>
        <?php
        return ob_get_clean();
    }

    /**
     * Renders the [hibob_job_details] shortcode.
     *
     * Expects a 'job_id' query parameter in the URL.
     *
     * @since 1.0.0
     * @param array $atts Shortcode attributes (not used currently).
     * @return string HTML output for the job details.
     */
    public function render_job_details_shortcode( $atts ) {
        if ( ! $this->api->has_credentials() ) {
            return '<p class="hibob-error">Hibob API credentials are not configured. Please check plugin settings.</p>';
        }

        $job_id = isset( $_GET['job_id'] ) ? sanitize_text_field( $_GET['job_id'] ) : null;

        if ( ! $job_id ) {
            return '<p class="hibob-error">No job ID specified. Please provide a job_id in the URL (e.g., ?job_id=123).</p>';
        }

        $job_details = $this->api->get_job_details( $job_id );

        if ( is_wp_error( $job_details ) ) {
            if ($job_details->get_error_data() && isset($job_details->get_error_data()['status']) && $job_details->get_error_data()['status'] == 404) {
                return '<p class="hibob-error">Job not found. It may have been filled or removed.</p>';
            }
            return '<p class="hibob-error">Error fetching job details: ' . esc_html( $job_details->get_error_message() ) . '</p>';
        }

        if ( empty( $job_details ) || !isset($job_details['id']) ) { // Check for actual job data
            return '<p class="hibob-error">Job details not found or the response was empty.</p>';
        }

        // Extract details (adjust based on the actual API response structure for job details)
        $title = isset( $job_details['title'] ) ? $job_details['title'] : 'N/A';
        $department = isset( $job_details['department'] ) ? $job_details['department'] : 'N/A';
        $location = isset( $job_details['location'] ) ? $job_details['location'] : 'N/A';
        $description = isset( $job_details['description'] ) ? $job_details['description'] : 'No description available.';
        $employment_type = isset( $job_details['employmentType'] ) ? $job_details['employmentType'] : 'N/A';
        // Add more fields as needed based on the API response, e.g., requirements, benefits, etc.

        if ( is_array( $location ) && isset( $location['name'] ) ) {
            $location_display = $location['name'];
        } elseif ( is_string( $location ) ) {
            $location_display = $location;
        } else {
            $location_display = 'N/A';
        }

        ob_start();
        ?>
        <div class="hibob-job-details-container">
            <h1 class="hibob-job-detail-title"><?php echo esc_html( $title ); ?></h1>
            <div class="hibob-job-detail-meta">
                <p><strong>Department:</strong> <?php echo esc_html( $department ); ?></p>
                <p><strong>Location:</strong> <?php echo esc_html( $location_display ); ?></p>
                <p><strong>Employment Type:</strong> <?php echo esc_html( $employment_type ); ?></p>
            </div>
            <div class="hibob-job-detail-description">
                <h2>Job Description</h2>
                <?php echo wp_kses_post( $description ); // Allows safe HTML like <p>, <ul>, <strong> ?>
            </div>
            
            <?php if (isset($job_details['applicationUrl']) && !empty($job_details['applicationUrl'])): ?>
                <p class="hibob-apply-now">
                    <a href="<?php echo esc_url($job_details['applicationUrl']); ?>" class="button button-primary" target="_blank" rel="noopener noreferrer">
                        Apply Now
                    </a>
                </p>
            <?php endif; ?>
            
            <?php
                // You might want to add a link back to the main listings page
                // Get this URL from an option or hardcode if it's fixed.
                // $listings_page_url = get_permalink(get_page_by_path('careers')); // Example
                // if ($listings_page_url) {
                //     echo '<p><a href="' . esc_url($listings_page_url) . '">« Back to Job Listings</a></p>';
                // }
            ?>
        </div>
        <?php
        return ob_get_clean();
    }
}